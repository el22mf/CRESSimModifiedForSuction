//Do not edit! This file was generated by Unity-ROS MessageGeneration.
using System;
using System.Linq;
using System.Collections.Generic;
using System.Text;
using Unity.Robotics.ROSTCPConnector.MessageGeneration;

namespace RosMessageTypes.Crtk
{
    [Serializable]
    public class CartesianImpedanceMsg : Message
    {
        public const string k_RosMessageName = "crtk_msgs/CartesianImpedance";
        public override string RosMessageName => k_RosMessageName;

        public Std.HeaderMsg header;
        //  vf pos & ori
        public Geometry.QuaternionMsg force_orientation;
        public Geometry.Vector3Msg force_position;
        public Geometry.QuaternionMsg torque_orientation;
        public CartesianImpedanceHalfPlaneGainsMsg position_positive;
        public CartesianImpedanceHalfPlaneGainsMsg position_negative;
        public CartesianImpedanceHalfPlaneGainsMsg orientation_positive;
        public CartesianImpedanceHalfPlaneGainsMsg orientation_negative;

        public CartesianImpedanceMsg()
        {
            this.header = new Std.HeaderMsg();
            this.force_orientation = new Geometry.QuaternionMsg();
            this.force_position = new Geometry.Vector3Msg();
            this.torque_orientation = new Geometry.QuaternionMsg();
            this.position_positive = new CartesianImpedanceHalfPlaneGainsMsg();
            this.position_negative = new CartesianImpedanceHalfPlaneGainsMsg();
            this.orientation_positive = new CartesianImpedanceHalfPlaneGainsMsg();
            this.orientation_negative = new CartesianImpedanceHalfPlaneGainsMsg();
        }

        public CartesianImpedanceMsg(Std.HeaderMsg header, Geometry.QuaternionMsg force_orientation, Geometry.Vector3Msg force_position, Geometry.QuaternionMsg torque_orientation, CartesianImpedanceHalfPlaneGainsMsg position_positive, CartesianImpedanceHalfPlaneGainsMsg position_negative, CartesianImpedanceHalfPlaneGainsMsg orientation_positive, CartesianImpedanceHalfPlaneGainsMsg orientation_negative)
        {
            this.header = header;
            this.force_orientation = force_orientation;
            this.force_position = force_position;
            this.torque_orientation = torque_orientation;
            this.position_positive = position_positive;
            this.position_negative = position_negative;
            this.orientation_positive = orientation_positive;
            this.orientation_negative = orientation_negative;
        }

        public static CartesianImpedanceMsg Deserialize(MessageDeserializer deserializer) => new CartesianImpedanceMsg(deserializer);

        private CartesianImpedanceMsg(MessageDeserializer deserializer)
        {
            this.header = Std.HeaderMsg.Deserialize(deserializer);
            this.force_orientation = Geometry.QuaternionMsg.Deserialize(deserializer);
            this.force_position = Geometry.Vector3Msg.Deserialize(deserializer);
            this.torque_orientation = Geometry.QuaternionMsg.Deserialize(deserializer);
            this.position_positive = CartesianImpedanceHalfPlaneGainsMsg.Deserialize(deserializer);
            this.position_negative = CartesianImpedanceHalfPlaneGainsMsg.Deserialize(deserializer);
            this.orientation_positive = CartesianImpedanceHalfPlaneGainsMsg.Deserialize(deserializer);
            this.orientation_negative = CartesianImpedanceHalfPlaneGainsMsg.Deserialize(deserializer);
        }

        public override void SerializeTo(MessageSerializer serializer)
        {
            serializer.Write(this.header);
            serializer.Write(this.force_orientation);
            serializer.Write(this.force_position);
            serializer.Write(this.torque_orientation);
            serializer.Write(this.position_positive);
            serializer.Write(this.position_negative);
            serializer.Write(this.orientation_positive);
            serializer.Write(this.orientation_negative);
        }

        public override string ToString()
        {
            return "CartesianImpedanceMsg: " +
            "\nheader: " + header.ToString() +
            "\nforce_orientation: " + force_orientation.ToString() +
            "\nforce_position: " + force_position.ToString() +
            "\ntorque_orientation: " + torque_orientation.ToString() +
            "\nposition_positive: " + position_positive.ToString() +
            "\nposition_negative: " + position_negative.ToString() +
            "\norientation_positive: " + orientation_positive.ToString() +
            "\norientation_negative: " + orientation_negative.ToString();
        }

#if UNITY_EDITOR
        [UnityEditor.InitializeOnLoadMethod]
#else
        [UnityEngine.RuntimeInitializeOnLoadMethod]
#endif
        public static void Register()
        {
            MessageRegistry.Register(k_RosMessageName, Deserialize);
        }
    }
}
