//Do not edit! This file was generated by Unity-ROS MessageGeneration.
using System;
using System.Linq;
using System.Collections.Generic;
using System.Text;
using Unity.Robotics.ROSTCPConnector.MessageGeneration;

namespace RosMessageTypes.Cisst
{
    [Serializable]
    public class IntervalStatisticsMsg : Message
    {
        public const string k_RosMessageName = "cisst_msgs/IntervalStatistics";
        public override string RosMessageName => k_RosMessageName;

        public Std.HeaderMsg header;
        //  average period
        public double period_avg;
        //  deviation on periodicity
        public double period_std_dev;
        //  min and max time between
        public double period_min;
        public double period_max;
        //  same 4 values for compute time
        public double compute_time_avg;
        public double compute_time_std_dev;
        public double compute_time_min;
        public double compute_time_max;
        //  number of samples used to compute these status
        public long number_of_samples;
        //  number of overruns base on previous interval average
        public long number_of_overruns;
        //  time window covered by these stats
        public double statistics_interval;
        //  user data
        public long user_data;

        public IntervalStatisticsMsg()
        {
            this.header = new Std.HeaderMsg();
            this.period_avg = 0.0;
            this.period_std_dev = 0.0;
            this.period_min = 0.0;
            this.period_max = 0.0;
            this.compute_time_avg = 0.0;
            this.compute_time_std_dev = 0.0;
            this.compute_time_min = 0.0;
            this.compute_time_max = 0.0;
            this.number_of_samples = 0;
            this.number_of_overruns = 0;
            this.statistics_interval = 0.0;
            this.user_data = 0;
        }

        public IntervalStatisticsMsg(Std.HeaderMsg header, double period_avg, double period_std_dev, double period_min, double period_max, double compute_time_avg, double compute_time_std_dev, double compute_time_min, double compute_time_max, long number_of_samples, long number_of_overruns, double statistics_interval, long user_data)
        {
            this.header = header;
            this.period_avg = period_avg;
            this.period_std_dev = period_std_dev;
            this.period_min = period_min;
            this.period_max = period_max;
            this.compute_time_avg = compute_time_avg;
            this.compute_time_std_dev = compute_time_std_dev;
            this.compute_time_min = compute_time_min;
            this.compute_time_max = compute_time_max;
            this.number_of_samples = number_of_samples;
            this.number_of_overruns = number_of_overruns;
            this.statistics_interval = statistics_interval;
            this.user_data = user_data;
        }

        public static IntervalStatisticsMsg Deserialize(MessageDeserializer deserializer) => new IntervalStatisticsMsg(deserializer);

        private IntervalStatisticsMsg(MessageDeserializer deserializer)
        {
            this.header = Std.HeaderMsg.Deserialize(deserializer);
            deserializer.Read(out this.period_avg);
            deserializer.Read(out this.period_std_dev);
            deserializer.Read(out this.period_min);
            deserializer.Read(out this.period_max);
            deserializer.Read(out this.compute_time_avg);
            deserializer.Read(out this.compute_time_std_dev);
            deserializer.Read(out this.compute_time_min);
            deserializer.Read(out this.compute_time_max);
            deserializer.Read(out this.number_of_samples);
            deserializer.Read(out this.number_of_overruns);
            deserializer.Read(out this.statistics_interval);
            deserializer.Read(out this.user_data);
        }

        public override void SerializeTo(MessageSerializer serializer)
        {
            serializer.Write(this.header);
            serializer.Write(this.period_avg);
            serializer.Write(this.period_std_dev);
            serializer.Write(this.period_min);
            serializer.Write(this.period_max);
            serializer.Write(this.compute_time_avg);
            serializer.Write(this.compute_time_std_dev);
            serializer.Write(this.compute_time_min);
            serializer.Write(this.compute_time_max);
            serializer.Write(this.number_of_samples);
            serializer.Write(this.number_of_overruns);
            serializer.Write(this.statistics_interval);
            serializer.Write(this.user_data);
        }

        public override string ToString()
        {
            return "IntervalStatisticsMsg: " +
            "\nheader: " + header.ToString() +
            "\nperiod_avg: " + period_avg.ToString() +
            "\nperiod_std_dev: " + period_std_dev.ToString() +
            "\nperiod_min: " + period_min.ToString() +
            "\nperiod_max: " + period_max.ToString() +
            "\ncompute_time_avg: " + compute_time_avg.ToString() +
            "\ncompute_time_std_dev: " + compute_time_std_dev.ToString() +
            "\ncompute_time_min: " + compute_time_min.ToString() +
            "\ncompute_time_max: " + compute_time_max.ToString() +
            "\nnumber_of_samples: " + number_of_samples.ToString() +
            "\nnumber_of_overruns: " + number_of_overruns.ToString() +
            "\nstatistics_interval: " + statistics_interval.ToString() +
            "\nuser_data: " + user_data.ToString();
        }

#if UNITY_EDITOR
        [UnityEditor.InitializeOnLoadMethod]
#else
        [UnityEngine.RuntimeInitializeOnLoadMethod]
#endif
        public static void Register()
        {
            MessageRegistry.Register(k_RosMessageName, Deserialize);
        }
    }
}
